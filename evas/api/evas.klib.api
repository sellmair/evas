// Klib ABI Dump
// Targets: [androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.sellmair:evas>
open annotation class io.sellmair.evas/UnstableEvasApi : kotlin/Annotation { // io.sellmair.evas/UnstableEvasApi|null[0]
    constructor <init>() // io.sellmair.evas/UnstableEvasApi.<init>|<init>(){}[0]
}

abstract interface io.sellmair.evas/Event // io.sellmair.evas/Event|null[0]

abstract interface io.sellmair.evas/State { // io.sellmair.evas/State|null[0]
    abstract interface <#A1: io.sellmair.evas/State?> Key { // io.sellmair.evas/State.Key|null[0]
        abstract val default // io.sellmair.evas/State.Key.default|{}default[0]
            abstract fun <get-default>(): #A1 // io.sellmair.evas/State.Key.default.<get-default>|<get-default>(){}[0]
    }
}

sealed interface io.sellmair.evas/Events : kotlin.coroutines/CoroutineContext.Element { // io.sellmair.evas/Events|null[0]
    open val key // io.sellmair.evas/Events.key|{}key[0]
        open fun <get-key>(): kotlin.coroutines/CoroutineContext.Key<*> // io.sellmair.evas/Events.key.<get-key>|<get-key>(){}[0]

    abstract fun <#A1: io.sellmair.evas/Event> events(kotlin.reflect/KClass<#A1>): kotlinx.coroutines.flow/Flow<#A1> // io.sellmair.evas/Events.events|events(kotlin.reflect.KClass<0:0>){0§<io.sellmair.evas.Event>}[0]
    abstract fun emitAsync(io.sellmair.evas/Event) // io.sellmair.evas/Events.emitAsync|emitAsync(io.sellmair.evas.Event){}[0]
    abstract suspend fun emit(io.sellmair.evas/Event) // io.sellmair.evas/Events.emit|emit(io.sellmair.evas.Event){}[0]

    final object Key : kotlin.coroutines/CoroutineContext.Key<io.sellmair.evas/Events> // io.sellmair.evas/Events.Key|null[0]
}

sealed interface io.sellmair.evas/States : kotlin.coroutines/CoroutineContext.Element { // io.sellmair.evas/States|null[0]
    open val key // io.sellmair.evas/States.key|{}key[0]
        open fun <get-key>(): kotlin.coroutines/CoroutineContext.Key<*> // io.sellmair.evas/States.key.<get-key>|<get-key>(){}[0]

    abstract fun <#A1: io.sellmair.evas/State?> getAndUpdateState(io.sellmair.evas/State.Key<#A1>, kotlin/Function1<#A1, #A1>): #A1 // io.sellmair.evas/States.getAndUpdateState|getAndUpdateState(io.sellmair.evas.State.Key<0:0>;kotlin.Function1<0:0,0:0>){0§<io.sellmair.evas.State?>}[0]
    abstract fun <#A1: io.sellmair.evas/State?> getState(io.sellmair.evas/State.Key<#A1>): kotlinx.coroutines.flow/StateFlow<#A1> // io.sellmair.evas/States.getState|getState(io.sellmair.evas.State.Key<0:0>){0§<io.sellmair.evas.State?>}[0]
    abstract fun <#A1: io.sellmair.evas/State?> setState(io.sellmair.evas/State.Key<#A1>, #A1) // io.sellmair.evas/States.setState|setState(io.sellmair.evas.State.Key<0:0>;0:0){0§<io.sellmair.evas.State?>}[0]
    abstract fun <#A1: io.sellmair.evas/State?> updateAndGetState(io.sellmair.evas/State.Key<#A1>, kotlin/Function1<#A1, #A1>): #A1 // io.sellmair.evas/States.updateAndGetState|updateAndGetState(io.sellmair.evas.State.Key<0:0>;kotlin.Function1<0:0,0:0>){0§<io.sellmair.evas.State?>}[0]
    abstract fun <#A1: io.sellmair.evas/State?> updateState(io.sellmair.evas/State.Key<#A1>, kotlin/Function1<#A1, #A1>): io.sellmair.evas/States.Update<#A1> // io.sellmair.evas/States.updateState|updateState(io.sellmair.evas.State.Key<0:0>;kotlin.Function1<0:0,0:0>){0§<io.sellmair.evas.State?>}[0]
    abstract suspend fun <#A1: io.sellmair.evas/State?> setState(io.sellmair.evas/State.Key<#A1>, kotlinx.coroutines.flow/Flow<#A1>) // io.sellmair.evas/States.setState|setState(io.sellmair.evas.State.Key<0:0>;kotlinx.coroutines.flow.Flow<0:0>){0§<io.sellmair.evas.State?>}[0]

    final class <#A1: out kotlin/Any?> Update { // io.sellmair.evas/States.Update|null[0]
        final val previous // io.sellmair.evas/States.Update.previous|{}previous[0]
            final fun <get-previous>(): #A1 // io.sellmair.evas/States.Update.previous.<get-previous>|<get-previous>(){}[0]
        final val value // io.sellmair.evas/States.Update.value|{}value[0]
            final fun <get-value>(): #A1 // io.sellmair.evas/States.Update.value.<get-value>|<get-value>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // io.sellmair.evas/States.Update.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.sellmair.evas/States.Update.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.sellmair.evas/States.Update.toString|toString(){}[0]
    }

    final object Key : kotlin.coroutines/CoroutineContext.Key<io.sellmair.evas/States> // io.sellmair.evas/States.Key|null[0]
}

final class <#A: io.sellmair.evas/State.Key<#B>, #B: io.sellmair.evas/State?> io.sellmair.evas/ColdStateProducerImpl : io.sellmair.evas/StateProducer { // io.sellmair.evas/ColdStateProducerImpl|null[0]
    constructor <init>(kotlinx.coroutines/CoroutineScope, kotlin.reflect/KClass<#A>, kotlin.time/Duration = ..., kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B>, #A, kotlin/Unit>, kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B>, #A, kotlin/Unit>) // io.sellmair.evas/ColdStateProducerImpl.<init>|<init>(kotlinx.coroutines.CoroutineScope;kotlin.reflect.KClass<1:0>;kotlin.time.Duration;kotlin.coroutines.SuspendFunction2<io.sellmair.evas.StateProducerScope<1:1>,1:0,kotlin.Unit>;kotlin.coroutines.SuspendFunction2<io.sellmair.evas.StateProducerScope<1:1>,1:0,kotlin.Unit>){}[0]

    final fun <#A1: io.sellmair.evas/State?> launchIfApplicable(io.sellmair.evas/State.Key<#A1>, kotlinx.coroutines.flow/MutableStateFlow<#A1>) // io.sellmair.evas/ColdStateProducerImpl.launchIfApplicable|launchIfApplicable(io.sellmair.evas.State.Key<0:0>;kotlinx.coroutines.flow.MutableStateFlow<0:0>){0§<io.sellmair.evas.State?>}[0]
}

final class <#A: io.sellmair.evas/State?> io.sellmair.evas/StateProducerScope : kotlinx.coroutines/CoroutineScope { // io.sellmair.evas/StateProducerScope|null[0]
    final val coroutineContext // io.sellmair.evas/StateProducerScope.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.sellmair.evas/StateProducerScope.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]

    final suspend fun (#A).emit() // io.sellmair.evas/StateProducerScope.emit|emit@1:0(){}[0]
    final suspend fun emit(#A) // io.sellmair.evas/StateProducerScope.emit|emit(1:0){}[0]
    final suspend fun emitAll(kotlinx.coroutines.flow/Flow<#A>) // io.sellmair.evas/StateProducerScope.emitAll|emitAll(kotlinx.coroutines.flow.Flow<1:0>){}[0]
}

final class io.sellmair.evas/MissingEventsException : io.sellmair.evas/EvasException { // io.sellmair.evas/MissingEventsException|null[0]
    constructor <init>(kotlin/String) // io.sellmair.evas/MissingEventsException.<init>|<init>(kotlin.String){}[0]
}

final class io.sellmair.evas/MissingStatesException : io.sellmair.evas/EvasException { // io.sellmair.evas/MissingStatesException|null[0]
    constructor <init>(kotlin/String) // io.sellmair.evas/MissingStatesException.<init>|<init>(kotlin.String){}[0]
}

open class io.sellmair.evas/EvasException : kotlin/Exception // io.sellmair.evas/EvasException|null[0]

sealed class io.sellmair.evas/StateProducerStarted { // io.sellmair.evas/StateProducerStarted|null[0]
    final object Companion { // io.sellmair.evas/StateProducerStarted.Companion|null[0]
        final val Eagerly // io.sellmair.evas/StateProducerStarted.Companion.Eagerly|{}Eagerly[0]
            final fun <get-Eagerly>(): io.sellmair.evas/StateProducerStarted // io.sellmair.evas/StateProducerStarted.Companion.Eagerly.<get-Eagerly>|<get-Eagerly>(){}[0]
        final val Lazily // io.sellmair.evas/StateProducerStarted.Companion.Lazily|{}Lazily[0]
            final fun <get-Lazily>(): io.sellmair.evas/StateProducerStarted // io.sellmair.evas/StateProducerStarted.Companion.Lazily.<get-Lazily>|<get-Lazily>(){}[0]
    }
}

final object io.sellmair.evas/OnInactive { // io.sellmair.evas/OnInactive|null[0]
    final fun <#A1: io.sellmair.evas/State.Key<#B1>, #B1: io.sellmair.evas/State?> keepValue(): kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B1>, #A1, kotlin/Unit> // io.sellmair.evas/OnInactive.keepValue|keepValue(){0§<io.sellmair.evas.State.Key<0:1>>;1§<io.sellmair.evas.State?>}[0]
    final fun <#A1: io.sellmair.evas/State.Key<#B1>, #B1: io.sellmair.evas/State?> resetValue(): kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B1>, #A1, kotlin/Unit> // io.sellmair.evas/OnInactive.resetValue|resetValue(){0§<io.sellmair.evas.State.Key<0:1>>;1§<io.sellmair.evas.State?>}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.sellmair.evas/OnInactive.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.sellmair.evas/OnInactive.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.sellmair.evas/OnInactive.toString|toString(){}[0]
}

final val io.sellmair.evas/emit // io.sellmair.evas/emit|@kotlinx.coroutines.flow.FlowCollector<0:0>{0§<kotlin.Any?>}emit[0]
    final fun <#A1: kotlin/Any?> (kotlinx.coroutines.flow/FlowCollector<#A1>).<get-emit>(): kotlin.coroutines/SuspendFunction1<#A1, kotlin/Unit> // io.sellmair.evas/emit.<get-emit>|<get-emit>@kotlinx.coroutines.flow.FlowCollector<0:0>(){0§<kotlin.Any?>}[0]
final val io.sellmair.evas/eventsOrNull // io.sellmair.evas/eventsOrNull|@kotlin.coroutines.CoroutineContext{}eventsOrNull[0]
    final fun (kotlin.coroutines/CoroutineContext).<get-eventsOrNull>(): io.sellmair.evas/Events? // io.sellmair.evas/eventsOrNull.<get-eventsOrNull>|<get-eventsOrNull>@kotlin.coroutines.CoroutineContext(){}[0]
final val io.sellmair.evas/eventsOrThrow // io.sellmair.evas/eventsOrThrow|@kotlin.coroutines.CoroutineContext{}eventsOrThrow[0]
    final fun (kotlin.coroutines/CoroutineContext).<get-eventsOrThrow>(): io.sellmair.evas/Events // io.sellmair.evas/eventsOrThrow.<get-eventsOrThrow>|<get-eventsOrThrow>@kotlin.coroutines.CoroutineContext(){}[0]
final val io.sellmair.evas/statesOrNull // io.sellmair.evas/statesOrNull|@kotlin.coroutines.CoroutineContext{}statesOrNull[0]
    final fun (kotlin.coroutines/CoroutineContext).<get-statesOrNull>(): io.sellmair.evas/States? // io.sellmair.evas/statesOrNull.<get-statesOrNull>|<get-statesOrNull>@kotlin.coroutines.CoroutineContext(){}[0]
final val io.sellmair.evas/statesOrThrow // io.sellmair.evas/statesOrThrow|@kotlin.coroutines.CoroutineContext{}statesOrThrow[0]
    final fun (kotlin.coroutines/CoroutineContext).<get-statesOrThrow>(): io.sellmair.evas/States // io.sellmair.evas/statesOrThrow.<get-statesOrThrow>|<get-statesOrThrow>@kotlin.coroutines.CoroutineContext(){}[0]

final fun <#A: io.sellmair.evas/State.Key<#B>, #B: io.sellmair.evas/State?> (kotlinx.coroutines/CoroutineScope).io.sellmair.evas/launchState(kotlin.coroutines/CoroutineContext, kotlin.time/Duration, kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B>, #A, kotlin/Unit>, kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B>, #A, kotlin/Unit>, kotlin.reflect/KClass<#A>): kotlinx.coroutines/Job // io.sellmair.evas/launchState|launchState@kotlinx.coroutines.CoroutineScope(kotlin.coroutines.CoroutineContext;kotlin.time.Duration;kotlin.coroutines.SuspendFunction2<io.sellmair.evas.StateProducerScope<0:1>,0:0,kotlin.Unit>;kotlin.coroutines.SuspendFunction2<io.sellmair.evas.StateProducerScope<0:1>,0:0,kotlin.Unit>;kotlin.reflect.KClass<0:0>){0§<io.sellmair.evas.State.Key<0:1>>;1§<io.sellmair.evas.State?>}[0]
final fun <#A: io.sellmair.evas/State?> (kotlinx.coroutines/CoroutineScope).io.sellmair.evas/launchState(io.sellmair.evas/State.Key<#A>, kotlin.coroutines/CoroutineContext = ..., io.sellmair.evas/StateProducerStarted = ..., kotlin.coroutines/SuspendFunction1<io.sellmair.evas/StateProducerScope<#A>, kotlin/Unit>): kotlinx.coroutines/Job // io.sellmair.evas/launchState|launchState@kotlinx.coroutines.CoroutineScope(io.sellmair.evas.State.Key<0:0>;kotlin.coroutines.CoroutineContext;io.sellmair.evas.StateProducerStarted;kotlin.coroutines.SuspendFunction1<io.sellmair.evas.StateProducerScope<0:0>,kotlin.Unit>){0§<io.sellmair.evas.State?>}[0]
final fun io.sellmair.evas/Events(): io.sellmair.evas/Events // io.sellmair.evas/Events|Events(){}[0]
final fun io.sellmair.evas/States(): io.sellmair.evas/States // io.sellmair.evas/States|States(){}[0]
final inline fun <#A: reified io.sellmair.evas/Event> (kotlinx.coroutines/CoroutineScope).io.sellmair.evas/collectEventsAsync(kotlin.coroutines/CoroutineContext = ..., kotlinx.coroutines/CoroutineStart = ..., noinline kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): kotlinx.coroutines/Job // io.sellmair.evas/collectEventsAsync|collectEventsAsync@kotlinx.coroutines.CoroutineScope(kotlin.coroutines.CoroutineContext;kotlinx.coroutines.CoroutineStart;kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<io.sellmair.evas.Event>}[0]
final inline fun <#A: reified io.sellmair.evas/State.Key<#B>, #B: io.sellmair.evas/State?> (kotlinx.coroutines/CoroutineScope).io.sellmair.evas/launchState(kotlin.coroutines/CoroutineContext = ..., kotlin.time/Duration = ..., noinline kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B>, #A, kotlin/Unit> = ..., noinline kotlin.coroutines/SuspendFunction2<io.sellmair.evas/StateProducerScope<#B>, #A, kotlin/Unit>): kotlinx.coroutines/Job // io.sellmair.evas/launchState|launchState@kotlinx.coroutines.CoroutineScope(kotlin.coroutines.CoroutineContext;kotlin.time.Duration;kotlin.coroutines.SuspendFunction2<io.sellmair.evas.StateProducerScope<0:1>,0:0,kotlin.Unit>;kotlin.coroutines.SuspendFunction2<io.sellmair.evas.StateProducerScope<0:1>,0:0,kotlin.Unit>){0§<io.sellmair.evas.State.Key<0:1>>;1§<io.sellmair.evas.State?>}[0]
final suspend fun (io.sellmair.evas/Event).io.sellmair.evas/emit() // io.sellmair.evas/emit|emit@io.sellmair.evas.Event(){}[0]
final suspend fun (io.sellmair.evas/Event).io.sellmair.evas/emitAsync() // io.sellmair.evas/emitAsync|emitAsync@io.sellmair.evas.Event(){}[0]
final suspend fun <#A: io.sellmair.evas/State?> (io.sellmair.evas/State.Key<#A>).io.sellmair.evas/collect(kotlinx.coroutines.flow/FlowCollector<#A>) // io.sellmair.evas/collect|collect@io.sellmair.evas.State.Key<0:0>(kotlinx.coroutines.flow.FlowCollector<0:0>){0§<io.sellmair.evas.State?>}[0]
final suspend fun <#A: io.sellmair.evas/State?> (io.sellmair.evas/State.Key<#A>).io.sellmair.evas/flow(): kotlinx.coroutines.flow/StateFlow<#A> // io.sellmair.evas/flow|flow@io.sellmair.evas.State.Key<0:0>(){0§<io.sellmair.evas.State?>}[0]
final suspend fun <#A: io.sellmair.evas/State?> (io.sellmair.evas/State.Key<#A>).io.sellmair.evas/getAndUpdate(kotlin/Function1<#A, #A>): #A // io.sellmair.evas/getAndUpdate|getAndUpdate@io.sellmair.evas.State.Key<0:0>(kotlin.Function1<0:0,0:0>){0§<io.sellmair.evas.State?>}[0]
final suspend fun <#A: io.sellmair.evas/State?> (io.sellmair.evas/State.Key<#A>).io.sellmair.evas/set(#A) // io.sellmair.evas/set|set@io.sellmair.evas.State.Key<0:0>(0:0){0§<io.sellmair.evas.State?>}[0]
final suspend fun <#A: io.sellmair.evas/State?> (io.sellmair.evas/State.Key<#A>).io.sellmair.evas/update(kotlin/Function1<#A, #A>): io.sellmair.evas/States.Update<#A> // io.sellmair.evas/update|update@io.sellmair.evas.State.Key<0:0>(kotlin.Function1<0:0,0:0>){0§<io.sellmair.evas.State?>}[0]
final suspend fun <#A: io.sellmair.evas/State?> (io.sellmair.evas/State.Key<#A>).io.sellmair.evas/updateAndGet(kotlin/Function1<#A, #A>): #A // io.sellmair.evas/updateAndGet|updateAndGet@io.sellmair.evas.State.Key<0:0>(kotlin.Function1<0:0,0:0>){0§<io.sellmair.evas.State?>}[0]
final suspend fun <#A: io.sellmair.evas/State?> (io.sellmair.evas/State.Key<#A>).io.sellmair.evas/value(): #A // io.sellmair.evas/value|value@io.sellmair.evas.State.Key<0:0>(){0§<io.sellmair.evas.State?>}[0]
final suspend inline fun <#A: reified io.sellmair.evas/Event> io.sellmair.evas/collectEvents(noinline kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>) // io.sellmair.evas/collectEvents|collectEvents(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<io.sellmair.evas.Event>}[0]
final suspend inline fun <#A: reified io.sellmair.evas/Event> io.sellmair.evas/events(): kotlinx.coroutines.flow/Flow<#A> // io.sellmair.evas/events|events(){0§<io.sellmair.evas.Event>}[0]
